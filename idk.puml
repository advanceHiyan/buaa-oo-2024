@startuml
class PrePro {
- String exprProed
- HashMap<Character,CustFun> funs
+ String removeSpece(String)
+ String proFgH(String)
+ boolean isFgH(Character)
+ int findnear(String)
+ int Fu1to1000(int)
+ String repl(String)
+ String getOutput()
}


class Poly {
- ArrayList<Mono> monos
+ void addMono(Mono)
+ ArrayList<Mono> getMonos()
+ void addMonos(Poly)
+ void multpoly(Poly)
+ String toString()
+ void qiuDao()
+ void Tidymonos()
+ String getOneExpStr(Mono)
+ String FindKRofexp(Poly)
}


interface Factor {
~ Poly toPoly()
~ String toString()
}

class Mono {
- BigInteger cment
- int sign
- BigInteger ement
- boolean haveEeXxPp
- Poly expNeiPoly
- boolean flag
+ BigInteger getCment()
+ void checkSign(int)
+ BigInteger getEment()
+ void addMono(BigInteger)
+ Mono mul(Mono)
+ void noreMul(Mono)
+ void odverse()
+ String toString()
+ void checkCmul()
+ void checkCadd(BigInteger)
+ int getSign()
+ boolean gethaveEeXxP()
+ Poly getExpNeiPoly()
+ Mono rexpdx()
+ void dxNoExp()
}


class Parser {
- Lexer lexer
+ Expr parserExpr(boolean)
+ Term parserTerm()
+ CoreFactor parserCore()
+ Factor parserFactor()
}


class Num {
- BigInteger value
+ String toString()
+ Poly toPoly()
}


class ExPexP {
- ArrayList<Token> tokens
- int zhi
+ Poly toPoly()
+ String exptoString()
}


class Token {
- Type type
- String content
+ String getContent()
+ Type getType()
+ String toString()
+ int opsTOsign()
}


enum Type {
+  ADD
+  SUB
+  MUL
+  EXP
+  L_K
+  R_K
+  NUM
+  X
+  ThreeExp
+  QD
}

class Letter {
- String letter
+ Poly toPoly()
+ String toString()
}


class FinPro {
- Poly poly
- HashMap<BigInteger,BigInteger> ces
- ArrayList<Mono> haveexpmonos
+ String SimplifyToStr()
+ String Strout()
+ String expStrOut()
+ String getOneExpStr(Mono)
+ String FindKRofexp(Poly)
+ String FindKRofexpcopyak(Poly)
+ int getsize()
}


class Term {
- ArrayList<CoreFactor> cfactors
+ String toString()
+ Poly topoly()
+ ArrayList<CoreFactor> getCfactors()
}


class CoreFactor {
- ArrayList<Factor> factors
- int exp
+ String toString()
+ Poly toPoly()
+ ArrayList<Factor> getFactors()
}


class Lexer {
- ArrayList<Token> tokens
- String expr
- int cur
+ void move()
+ Token now()
+ Token last()
+ Token next()
+ boolean notEnd()
+ int getCur()
}


class Expr {
- ArrayList<Term> terms
- ArrayList<Token> ops
- boolean needQd
+ void QiuDao()
+ Poly toPoly()
+ String toString()
+ ArrayList<Term> getTerms()
}


class Main {
- {static} HashMap<Character,CustFun> sCs
+ {static} void main(String[])
}


class CustFun {
- ArrayList<String> xyzs
- String exprFactor
+ String replaceXyz(ArrayList<String>)
+ ArrayList<String> getXyzs()
+ String getExprFactor()
}




Factor <|.. Num
Factor <|.. ExPexP
Factor <|.. Letter
Factor <|.. Expr
@enduml